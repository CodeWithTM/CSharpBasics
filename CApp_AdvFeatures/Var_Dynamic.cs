using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CApp_AdvFeatures
{
    internal class Var_Dynamic
    {
        //below code generated by Github copilot :)
        //i love it
        public static long Factorial(int n)
        {
            if (n < 0)
                throw new ArgumentException("Input must be a non-negative integer.");
            if (n == 0 || n == 1)
                return 1;
            return n * Factorial(n - 1);
        }

        public static int summation(int n)
        {
            if (n < 0)
                throw new ArgumentException("Input must be a non-negative integer.");
            if (n == 0)
                return 0;
            return n + summation(n - 1);
        }

        public static void Main(string[] args)
        {
            // Using var
            var number = 5;
            Console.WriteLine($"Factorial of {number} is {Factorial(number)}");
            Console.WriteLine($"Summation of numbers up to {number} is {summation(number)}");

            // Using dynamic
            dynamic dynNumber = 6;
            Console.WriteLine($"Factorial of {dynNumber} is {Factorial(dynNumber)}");
            Console.WriteLine($"Summation of numbers up to {dynNumber} is {summation(dynNumber)}");

            // Uncomment the following lines to see exceptions in action
            // Console.WriteLine(Factorial(-1));
            // Console.WriteLine(summation(-1));
        }

        //show me example to differentiate var and dynamic
        public static void ExampleVarVsDynamic()
        {
            // var is statically typed at compile time
            var staticVar = "Hello, World!";
            // dynamic is resolved at runtime
            dynamic dynamicVar = "Hello, Dynamic World!";

            Console.WriteLine(staticVar);
            Console.WriteLine(dynamicVar);

            // Uncommenting the following line will cause a compile-time error
            // staticVar = 10; // Error: Cannot implicitly convert type 'int' to 'string'

            // This will work because dynamic can change types at runtime
            dynamicVar = 10;
            Console.WriteLine(dynamicVar);
        }
    }
}
